This first sample demonstrates communication with a backend database in mysql 
the user logs into the website and the information is passed from flash to the backend language where the user credentials are tested and the database is queried to retrieve the users information once the information is retrieved it is passed back to flash.

The process begins in the main file(spotMain.as) on line 607 in the function "testAndSignUP" this is the function that listens for the mouse clicks on the specfic button this function calls the php file called ValidateEmail(also included) this file is an php class that handles connecting to the database and validating user email. the specific functin in the class is called valid_email hence the full call of ValidateEmail.valid_email. the second parameter is return resource for the call basically it handles what you do once the information is retrived from the database.In the result  function (onResult2) this is where the user information from the database fills out the user class instance() ie. if the user is a gold member,what user id number,session variables etc.... once that happens the program state is changed to the members area. the database library is called amfphp (Action Message Format for php is a binary format used to serialize ActionScript objects *from wikipedia). it makes database communication ten times faster than ordinary post or get methods.

A functional exmple can be found at www.spotaplace.com, its purely a functional example. use user name:iamezell@gmail.com and pass:test
files in this example are"
1.spotMain.as
2.validateEmail.php


This will be he short version of the explanation. I can write a longer explantion if you would like, let me know.
There is a lot of code in here so what I will draw your attention to is my use of the observer pattern for the artificial intelligence of the Aliens.
I used this pattern to continually update the Aliens of the hero, the aliens basically implement an observer  interface (Alien.as line 9) through this interface they have access to a function (IObserver.as line 3) which can hold the variables that need to be updated every frame loop.  To get that function to have this behavior the Alien class must also register (Alien.as line 56 ) as an observer with the implemented subject interfaces client (other wise known as the main class this function is being called from alien.as and is implemented in platformer.as line 1292). The concrete class (platformer must implement 3 functions, 1 of which is the register function the other two are the removeObserver(platformer.as 1297) function and the update Observer function(platformer.as 1305). These functions do just what there name says the notify function updates all the observers of the changes through updating an array that holds references to the observers and the removeOberver function takes observers out of the array. these functions must be implemented as a contract with the ISubject interface(ISubject.as).